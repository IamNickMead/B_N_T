#include "scramble_analysis.h"

packet str_to_packet(string signal)
{
  packet _packet = 0;
    
  for (int index(0); index < 128; index++)
    if (signal[128-index] == '1')
      _packet[index] = 1;
    
  return _packet;
}

chunk packet_to_chunk(packet packet_in, int chunk_no)
{
  chunk temp;

  for (int i(0); i < 30; i++)
    temp[i] = packet_in[30*chunk_no + i];
    
  return temp;
}

packet attach_chunk_to_packet(packet packet_in, chunk scrambled, int chunk_no) //IN PROGRESS
{
   packet packet_out;

   packet_out = packet_in;
   // for (int i(0); i < 8; i++)
   //packet_out[120+i] = packet_in[120+i];
  
   //for (int i(0); i < 30; i++)
   //packet_out[30*chunk_no+i] = scrambled[i];

   return packet_out;
}


int transition_count(chunk DATA)
{
  int count(0); 
   
  for (int i(1); i < 30 ; i++)
    if (DATA[i] != DATA[i-1])
      count++;

  return count;
}

chunk new_scramble(chunk TX_DATA_IN)
{
  static chunk TX_FEEDBACK(0);
  chunk TX_DATA_OUT(0);
    
  TX_DATA_OUT[ 0] = TX_DATA_IN[ 0] ^ TX_FEEDBACK[ 0] ^ TX_FEEDBACK[ 2];
  TX_DATA_OUT[ 1] = TX_DATA_IN[ 1] ^ TX_FEEDBACK[ 1] ^ TX_FEEDBACK[ 3];
  TX_DATA_OUT[ 2] = TX_DATA_IN[ 2] ^ TX_FEEDBACK[ 2] ^ TX_FEEDBACK[ 4];
  TX_DATA_OUT[ 3] = TX_DATA_IN[ 3] ^ TX_FEEDBACK[ 3] ^ TX_FEEDBACK[ 5];
  TX_DATA_OUT[ 4] = TX_DATA_IN[ 4] ^ TX_FEEDBACK[ 4] ^ TX_FEEDBACK[ 6];
  TX_DATA_OUT[ 5] = TX_DATA_IN[ 5] ^ TX_FEEDBACK[ 5] ^ TX_FEEDBACK[ 7];
  TX_DATA_OUT[ 6] = TX_DATA_IN[ 6] ^ TX_FEEDBACK[ 6] ^ TX_FEEDBACK[ 8];
  TX_DATA_OUT[ 7] = TX_DATA_IN[ 7] ^ TX_FEEDBACK[ 7] ^ TX_FEEDBACK[ 9];
  TX_DATA_OUT[ 8] = TX_DATA_IN[ 8] ^ TX_FEEDBACK[ 8] ^ TX_FEEDBACK[10];
  TX_DATA_OUT[ 9] = TX_DATA_IN[ 9] ^ TX_FEEDBACK[ 9] ^ TX_FEEDBACK[11];
  TX_DATA_OUT[10] = TX_DATA_IN[10] ^ TX_FEEDBACK[10] ^ TX_FEEDBACK[12];
  TX_DATA_OUT[11] = TX_DATA_IN[11] ^ TX_FEEDBACK[11] ^ TX_FEEDBACK[13];
  TX_DATA_OUT[12] = TX_DATA_IN[12] ^ TX_FEEDBACK[12] ^ TX_FEEDBACK[14];
  TX_DATA_OUT[13] = TX_DATA_IN[13] ^ TX_FEEDBACK[13] ^ TX_FEEDBACK[15];
  TX_DATA_OUT[14] = TX_DATA_IN[14] ^ TX_FEEDBACK[14] ^ TX_FEEDBACK[16];
  TX_DATA_OUT[15] = TX_DATA_IN[15] ^ TX_FEEDBACK[15] ^ TX_FEEDBACK[17];
  TX_DATA_OUT[16] = TX_DATA_IN[16] ^ TX_FEEDBACK[16] ^ TX_FEEDBACK[18];
  TX_DATA_OUT[17] = TX_DATA_IN[17] ^ TX_FEEDBACK[17] ^ TX_FEEDBACK[19];
  TX_DATA_OUT[18] = TX_DATA_IN[18] ^ TX_FEEDBACK[18] ^ TX_FEEDBACK[20];
  TX_DATA_OUT[19] = TX_DATA_IN[19] ^ TX_FEEDBACK[19] ^ TX_FEEDBACK[21];
  TX_DATA_OUT[20] = TX_DATA_IN[20] ^ TX_FEEDBACK[20] ^ TX_FEEDBACK[22];
  TX_DATA_OUT[21] = TX_DATA_IN[21] ^ TX_FEEDBACK[21] ^ TX_FEEDBACK[23];
  TX_DATA_OUT[22] = TX_DATA_IN[22] ^ TX_FEEDBACK[22] ^ TX_FEEDBACK[24];
  TX_DATA_OUT[23] = TX_DATA_IN[23] ^ TX_FEEDBACK[23] ^ TX_FEEDBACK[25];
  TX_DATA_OUT[24] = TX_DATA_IN[24] ^ TX_FEEDBACK[24] ^ TX_FEEDBACK[26];
  TX_DATA_OUT[25] = TX_DATA_IN[25] ^ TX_FEEDBACK[25] ^ TX_FEEDBACK[27];
  TX_DATA_OUT[26] = TX_DATA_IN[26] ^ TX_FEEDBACK[26] ^ TX_FEEDBACK[28];
  TX_DATA_OUT[27] = TX_DATA_IN[27] ^ TX_FEEDBACK[27] ^ TX_FEEDBACK[29];
  TX_DATA_OUT[28] = TX_DATA_IN[28] ^ TX_FEEDBACK[28] ^ TX_DATA_IN   [ 0] ^ TX_FEEDBACK[0] ^ TX_FEEDBACK[2];
  TX_DATA_OUT[29] = TX_DATA_IN[29] ^ TX_FEEDBACK[29] ^ TX_DATA_IN   [ 1] ^ TX_FEEDBACK[1] ^ TX_FEEDBACK[3];
    
  TX_FEEDBACK = TX_DATA_OUT;

  return TX_DATA_OUT; //COMMON_FRAME
}

chunk new_unscramble(chunk RX_DATA_IN)
{
  static chunk RX_FEEDBACK(0);
  chunk RX_DATA_OUT(0);
    
  RX_DATA_OUT[ 0] = RX_DATA_IN[ 0] ^ RX_FEEDBACK[ 0] ^ RX_FEEDBACK [ 2];
  RX_DATA_OUT[ 1] = RX_DATA_IN[ 1] ^ RX_FEEDBACK[ 1] ^ RX_FEEDBACK [ 3];
  RX_DATA_OUT[ 2] = RX_DATA_IN[ 2] ^ RX_FEEDBACK[ 2] ^ RX_FEEDBACK [ 4];
  RX_DATA_OUT[ 3] = RX_DATA_IN[ 3] ^ RX_FEEDBACK[ 3] ^ RX_FEEDBACK [ 5];
  RX_DATA_OUT[ 4] = RX_DATA_IN[ 4] ^ RX_FEEDBACK[ 4] ^ RX_FEEDBACK [ 6];
  RX_DATA_OUT[ 5] = RX_DATA_IN[ 5] ^ RX_FEEDBACK[ 5] ^ RX_FEEDBACK [ 7];
  RX_DATA_OUT[ 6] = RX_DATA_IN[ 6] ^ RX_FEEDBACK[ 6] ^ RX_FEEDBACK [ 8];
  RX_DATA_OUT[ 7] = RX_DATA_IN[ 7] ^ RX_FEEDBACK[ 7] ^ RX_FEEDBACK [ 9];
  RX_DATA_OUT[ 8] = RX_DATA_IN[ 8] ^ RX_FEEDBACK[ 8] ^ RX_FEEDBACK [10];
  RX_DATA_OUT[ 9] = RX_DATA_IN[ 9] ^ RX_FEEDBACK[ 9] ^ RX_FEEDBACK [11];
  RX_DATA_OUT[10] = RX_DATA_IN[10] ^ RX_FEEDBACK[10] ^ RX_FEEDBACK [12];
  RX_DATA_OUT[11] = RX_DATA_IN[11] ^ RX_FEEDBACK[11] ^ RX_FEEDBACK [13];
  RX_DATA_OUT[12] = RX_DATA_IN[12] ^ RX_FEEDBACK[12] ^ RX_FEEDBACK [14];
  RX_DATA_OUT[13] = RX_DATA_IN[13] ^ RX_FEEDBACK[13] ^ RX_FEEDBACK [15];
  RX_DATA_OUT[14] = RX_DATA_IN[14] ^ RX_FEEDBACK[14] ^ RX_FEEDBACK [16];
  RX_DATA_OUT[15] = RX_DATA_IN[15] ^ RX_FEEDBACK[15] ^ RX_FEEDBACK [17];
  RX_DATA_OUT[16] = RX_DATA_IN[16] ^ RX_FEEDBACK[16] ^ RX_FEEDBACK [18];
  RX_DATA_OUT[17] = RX_DATA_IN[17] ^ RX_FEEDBACK[17] ^ RX_FEEDBACK [19];
  RX_DATA_OUT[18] = RX_DATA_IN[18] ^ RX_FEEDBACK[18] ^ RX_FEEDBACK [20];
  RX_DATA_OUT[19] = RX_DATA_IN[19] ^ RX_FEEDBACK[19] ^ RX_FEEDBACK [21];
  RX_DATA_OUT[20] = RX_DATA_IN[20] ^ RX_FEEDBACK[20] ^ RX_FEEDBACK [22];
  RX_DATA_OUT[21] = RX_DATA_IN[21] ^ RX_FEEDBACK[21] ^ RX_FEEDBACK [23];
  RX_DATA_OUT[22] = RX_DATA_IN[22] ^ RX_FEEDBACK[22] ^ RX_FEEDBACK [24];
  RX_DATA_OUT[23] = RX_DATA_IN[23] ^ RX_FEEDBACK[23] ^ RX_FEEDBACK [25];
  RX_DATA_OUT[24] = RX_DATA_IN[24] ^ RX_FEEDBACK[24] ^ RX_FEEDBACK [26];
  RX_DATA_OUT[25] = RX_DATA_IN[25] ^ RX_FEEDBACK[25] ^ RX_FEEDBACK [27];
  RX_DATA_OUT[26] = RX_DATA_IN[26] ^ RX_FEEDBACK[26] ^ RX_FEEDBACK [28];
  RX_DATA_OUT[27] = RX_DATA_IN[27] ^ RX_FEEDBACK[27] ^ RX_FEEDBACK [29];
  RX_DATA_OUT[28] = RX_DATA_IN[28] ^ RX_FEEDBACK[28] ^ RX_DATA_IN[ 0];
  RX_DATA_OUT[29] = RX_DATA_IN[29] ^ RX_FEEDBACK[29] ^ RX_DATA_IN[ 1];
    
  RX_FEEDBACK = RX_DATA_IN;
    
  return RX_DATA_OUT;
}

chunk  old_scramble(chunk DATA_IN)
{
  static chunk COMMON_FRAME_1(7);
  static chunk COMMON_FRAME_2(0);
  chunk DATA_OUT(0);

  COMMON_FRAME_2[0 ] = COMMON_FRAME_1[0 ] ^ COMMON_FRAME_1[29];
  COMMON_FRAME_2[1 ] = COMMON_FRAME_1[0 ] ^ COMMON_FRAME_1[1 ] ^ COMMON_FRAME_1[29];
  COMMON_FRAME_2[2 ] = COMMON_FRAME_1[1 ] ^ COMMON_FRAME_1[2 ];
  COMMON_FRAME_2[3 ] = COMMON_FRAME_1[2 ] ^ COMMON_FRAME_1[3 ];
  COMMON_FRAME_2[4 ] = COMMON_FRAME_1[3 ] ^ COMMON_FRAME_1[4 ];
  COMMON_FRAME_2[5 ] = COMMON_FRAME_1[4 ] ^ COMMON_FRAME_1[5 ];
  COMMON_FRAME_2[6 ] = COMMON_FRAME_1[5 ] ^ COMMON_FRAME_1[6 ];
  COMMON_FRAME_2[7 ] = COMMON_FRAME_1[6 ] ^ COMMON_FRAME_1[7 ];
  COMMON_FRAME_2[8 ] = COMMON_FRAME_1[7 ] ^ COMMON_FRAME_1[8 ];
  COMMON_FRAME_2[9 ] = COMMON_FRAME_1[8 ] ^ COMMON_FRAME_1[9 ];
  COMMON_FRAME_2[10] = COMMON_FRAME_1[9 ] ^ COMMON_FRAME_1[10];
  COMMON_FRAME_2[11] = COMMON_FRAME_1[10] ^ COMMON_FRAME_1[11];
  COMMON_FRAME_2[12] = COMMON_FRAME_1[11] ^ COMMON_FRAME_1[12];
  COMMON_FRAME_2[13] = COMMON_FRAME_1[12] ^ COMMON_FRAME_1[13];
  COMMON_FRAME_2[14] = COMMON_FRAME_1[13] ^ COMMON_FRAME_1[14];
  COMMON_FRAME_2[15] = COMMON_FRAME_1[14] ^ COMMON_FRAME_1[15];
  COMMON_FRAME_2[16] = COMMON_FRAME_1[15] ^ COMMON_FRAME_1[16];
  COMMON_FRAME_2[17] = COMMON_FRAME_1[16] ^ COMMON_FRAME_1[17];
  COMMON_FRAME_2[18] = COMMON_FRAME_1[17] ^ COMMON_FRAME_1[18];
  COMMON_FRAME_2[19] = COMMON_FRAME_1[18] ^ COMMON_FRAME_1[19];
  COMMON_FRAME_2[20] = COMMON_FRAME_1[19] ^ COMMON_FRAME_1[20];
  COMMON_FRAME_2[21] = COMMON_FRAME_1[20] ^ COMMON_FRAME_1[21];
  COMMON_FRAME_2[22] = COMMON_FRAME_1[21] ^ COMMON_FRAME_1[22];
  COMMON_FRAME_2[23] = COMMON_FRAME_1[22] ^ COMMON_FRAME_1[23];
  COMMON_FRAME_2[24] = COMMON_FRAME_1[23] ^ COMMON_FRAME_1[24];
  COMMON_FRAME_2[25] = COMMON_FRAME_1[24] ^ COMMON_FRAME_1[25];
  COMMON_FRAME_2[26] = COMMON_FRAME_1[25] ^ COMMON_FRAME_1[26];
  COMMON_FRAME_2[27] = COMMON_FRAME_1[26] ^ COMMON_FRAME_1[27];
  COMMON_FRAME_2[28] = COMMON_FRAME_1[27] ^ COMMON_FRAME_1[28];
  COMMON_FRAME_2[29] = COMMON_FRAME_1[28] ^ COMMON_FRAME_1[29];
  DATA_OUT[0 ] = DATA_IN[0 ] ^ COMMON_FRAME_1[29];
  DATA_OUT[1 ] = DATA_IN[1 ] ^ COMMON_FRAME_1[28];
  DATA_OUT[2 ] = DATA_IN[2 ] ^ COMMON_FRAME_1[27];
  DATA_OUT[3 ] = DATA_IN[3 ] ^ COMMON_FRAME_1[26];
  DATA_OUT[4 ] = DATA_IN[4 ] ^ COMMON_FRAME_1[25];
  DATA_OUT[5 ] = DATA_IN[5 ] ^ COMMON_FRAME_1[24];
  DATA_OUT[6 ] = DATA_IN[6 ] ^ COMMON_FRAME_1[23];
  DATA_OUT[7 ] = DATA_IN[7 ] ^ COMMON_FRAME_1[22];
  DATA_OUT[8 ] = DATA_IN[8 ] ^ COMMON_FRAME_1[21];
  DATA_OUT[9 ] = DATA_IN[9 ] ^ COMMON_FRAME_1[20];
  DATA_OUT[10] = DATA_IN[10] ^ COMMON_FRAME_1[19];
  DATA_OUT[11] = DATA_IN[11] ^ COMMON_FRAME_1[18];
  DATA_OUT[12] = DATA_IN[12] ^ COMMON_FRAME_1[17];
  DATA_OUT[13] = DATA_IN[13] ^ COMMON_FRAME_1[16];
  DATA_OUT[14] = DATA_IN[14] ^ COMMON_FRAME_1[15];
  DATA_OUT[15] = DATA_IN[15] ^ COMMON_FRAME_1[14];
  DATA_OUT[16] = DATA_IN[16] ^ COMMON_FRAME_1[13];
  DATA_OUT[17] = DATA_IN[17] ^ COMMON_FRAME_1[12];
  DATA_OUT[18] = DATA_IN[18] ^ COMMON_FRAME_1[11];
  DATA_OUT[19] = DATA_IN[19] ^ COMMON_FRAME_1[10];
  DATA_OUT[20] = DATA_IN[20] ^ COMMON_FRAME_1[9 ];
  DATA_OUT[21] = DATA_IN[21] ^ COMMON_FRAME_1[8 ];
  DATA_OUT[22] = DATA_IN[22] ^ COMMON_FRAME_1[7 ];
  DATA_OUT[23] = DATA_IN[23] ^ COMMON_FRAME_1[6 ];
  DATA_OUT[24] = DATA_IN[24] ^ COMMON_FRAME_1[5 ];
  DATA_OUT[25] = DATA_IN[25] ^ COMMON_FRAME_1[4 ];
  DATA_OUT[26] = DATA_IN[26] ^ COMMON_FRAME_1[3 ];
  DATA_OUT[27] = DATA_IN[27] ^ COMMON_FRAME_1[2 ];
  DATA_OUT[28] = DATA_IN[28] ^ COMMON_FRAME_1[1 ];
  DATA_OUT[29] = DATA_IN[29] ^ COMMON_FRAME_1[0 ] ^ COMMON_FRAME_1[29 ];

  COMMON_FRAME_1 = COMMON_FRAME_2;

  return DATA_OUT;
}



