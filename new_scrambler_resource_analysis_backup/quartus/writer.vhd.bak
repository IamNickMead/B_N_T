 
-- Name : writer
-- Entity name : the_writer
-- Author : B.Jeffrey
-- Date created : 15/6/2015
-- Description : Writes out a super pixel packet 128 bit to a txt file after adding the LHCb header '0101'

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_arith.ALL;
use STD.textio.all;

--------- entity declaration -------
ENTITY the_writer IS
  port( 
    pixel_write : IN std_logic_vector(123 downto 0) ;
    rst, clk_40MHz, i_data_valid: IN std_logic;
    o_data_valid : OUT std_logic
    ) ;
end ENTITY ;

ARCHITECTURE w OF the_writer IS 

  function stdvec_to_str(inp: std_logic_vector) return string is
    variable temp: string(inp'left+1 downto 1) := (others => 'X');
  begin
    for i in inp'reverse_range loop
      if (inp(i) = '1') then
        temp(i+1) := '1';
      elsif (inp(i) = '0') then
        temp(i+1) := '0';
      end if;
    end loop;
    return temp;
  end function stdvec_to_str;

BEGIN
  process(rst, clk_40MHz)
    ------- declare all variables ---------		
    file file_pointer : text;
    variable line_content : string ( 1 to 128 );
    variable line_num : line;
    variable i,j : integer := 0;
    variable char : std_logic :='0';
     
  begin
     file_open(file_pointer,"/data/simulation/MCsim_GWT_RX_GWT_TX/write_file.txt",WRITE_MODE);
    ------------- reset ------------		
    if rst = '1' then
      --------- open file in WRITE mode --------					
   --   file_open(file_pointer,"/data/simulation/MCsim_GWT_RX_GWT_TX/write_file.txt",WRITE_MODE);     
      for j in 1 to 128 loop
        line_content(129-j) := '0';
      end loop;
      ----------- write the lines ------------
      write(line_num,line_content);
      writeline (file_pointer,line_num);
      ------------ close the file ---------			
   --   file_close(file_pointer);
      o_data_valid <= '0';
      --end if;
      --wait until rst = '0';
    elsif(rising_edge(clk_40MHz)) then
     
--    while read_end /= '1' loop
      if i_data_valid = '1' then	
                                        ------------- add header '0101' ----------				
        --line_content(1) := '0';
        --line_content(2) := '1';
        --line_content(3) := '0';
        --line_content(4) := '1';
        
        --                                --line_content := "stdvect_to_str(0101" & pixel_write;())					-------------- works out whether a 0 or 1 at each point -------				
        --for j in 5 to 128 loop
        --  char := pixel_write(j-5);
        --  if(char = '0') then
        --    line_content(133-j) := '0';
        --  elsif (char = '1') then
        --    line_content(133-j) := '1';
        --  end if;
        --end loop;
        ---------- write line ---------------
        
	
		line_content := "0101" & stdvec_to_str(pixel_write);
	        

      else
					----- if not valid data write a line of X's ------
        --for j in 1 to 128 loop
        --  line_content(129-j) := 'X';
        --end loop;
        line_content := "0101"  & stdvec_to_str(pixel_write);
                                        ----------- write the lines ------------
      end if;

      write(line_num,line_content);
      writeline (file_pointer,line_num);
      --wait until clk_40MHz = '1';
      o_data_valid <= i_data_valid;
      --  end loop;
      ----------	--- close file -----------
 
    end if;
 --   file_close(file_pointer); 
  end process;
END  w ;
